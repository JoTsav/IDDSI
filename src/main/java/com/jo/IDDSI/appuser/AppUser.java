package com.jo.IDDSI.appuser;

import jakarta.persistence.*;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.Collections;

/**
 * Represents a user in the application with various attributes and implements
 * the UserDetails interface for Spring Security integration.
 * <p>
 * This class contains user-related information such as username, email, password,
 * role, and account status (locked/enabled). It also provides methods to retrieve
 * user authorities and account status for authentication and authorization purposes.
 */

@Getter
@Setter
@EqualsAndHashCode
@NoArgsConstructor
@Entity // This class is an entity, which means it will be mapped to a database table
public class AppUser implements UserDetails {

    @Id
    @SequenceGenerator(
            name = "student_sequence",
            sequenceName = "student_sequence",
            allocationSize = 1
    )
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "student_sequence"
    )
    private Long id; // auto-generated by the database
    private String firstName;
    private String lastName;
    private String email;
    private String password;

    @Enumerated(EnumType.STRING)
    private AppUserRole appUserRole;

    private Boolean locked = false; // default value
    private Boolean enabled = false; // default value

    public AppUser(String firstName,
                   String lastName,
                   String email,
                   String password,
                   AppUserRole appUserRole) {
        this.lastName = lastName;
        this.email = email;
        this.password = password;
        this.appUserRole = appUserRole;
        this.firstName = firstName;
    }

    /**
     * Retrieves the authorities granted to the user. The authorities are determined
     * based on the user's role, represented by an instance of {@code AppUserRole}.
     *
     * @return a collection containing the user's granted authorities, where each authority
     *         corresponds to the user's role. API endpoints are accessed based on these. (ADMIN/USER)
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        SimpleGrantedAuthority authority =
                new SimpleGrantedAuthority(appUserRole.name());
        return Collections.singletonList(authority);
    }

    @Override
    public String getPassword() {
        return password;
    }


    @Override
    public String getUsername() {
        return email;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return !locked; // false
    }

    // Java Mail Sender credentials expiration
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }
}
